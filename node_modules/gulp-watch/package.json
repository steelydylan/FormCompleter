{
  "name": "gulp-watch",
  "version": "4.2.4",
  "description": "Watch, that actually is an endless stream",
  "main": "index.js",
  "keywords": [
    "gulp",
    "watch",
    "gulpplugin"
  ],
  "scripts": {
    "test": "mocha -R spec",
    "coverage": "istanbul cover node_modules/.bin/_mocha --report html -- -R spec",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "files": [
    "index.js"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/floatdrop/gulp-watch.git"
  },
  "author": {
    "name": "Vsevolod Strukchinsky"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/floatdrop/gulp-watch/issues"
  },
  "devDependencies": {
    "coveralls": "^2.7.0",
    "istanbul": "^0.3.0",
    "mocha": "~1.21.4",
    "mocha-lcov-reporter": "^0.0.1",
    "proxyquire": "^1.0.1",
    "rimraf": "^2.2.8",
    "should": "~4.0.4",
    "sinon": "^1.9.1",
    "stream-assert": "^2.0.1",
    "strip-ansi": "^2.0.0",
    "touch": "0.0.3"
  },
  "dependencies": {
    "anymatch": "1.1.x",
    "chokidar": "^1.0.0",
    "glob-parent": "^1.0.0",
    "gulp-util": "~3.0.0",
    "is-glob": "^1.1.0",
    "path-is-absolute": "^1.0.0",
    "readable-stream": "^1.0.31",
    "vinyl": "^0.4.3",
    "vinyl-file": "~1.1.0"
  },
  "engine": "node >= 0.10",
  "readme": "# [gulp](https://github.com/gulpjs/gulp)-watch [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url] [![Dependency Status][depstat-image]][depstat-url]\n\nFile watcher that uses super-fast [chokidar](https://github.com/paulmillr/chokidar) and emits vinyl objects.\n\n## Installation\n\nRun `npm install gulp-watch`.\n\n## Usage\n\n```js\nvar gulp = require('gulp'),\n    watch = require('gulp-watch');\n\ngulp.task('stream', function () {\n    gulp.src('css/**/*.css')\n        .pipe(watch('css/**/*.css'))\n        .pipe(gulp.dest('build'));\n});\n\ngulp.task('callback', function () {\n    watch('css/**/*.css', function () {\n        gulp.src('css/**/*.css')\n            .pipe(watch('css/**/*.css'));\n    ));\n});\n```\n\n> __Protip:__ until gulpjs 4.0 is released, you can use [gulp-plumber](https://github.com/floatdrop/gulp-plumber) to prevent stops on errors.\n\nMore examples can be found in [`docs/readme.md`](/docs/readme.md).\n\n## API\n\n### watch(glob, [options, callback])\n\nCreates a watcher that will spy on files that are matched by `glob` which can be a\nglob string or array of glob strings.\n\nReturns a pass through stream that will emit vinyl files\n(with additional `event` property) that corresponds to event on file-system.\n\n#### Callback `function(vinyl)`\n\nThis function is called when events happen on the file-system.\nAll incoming files that are piped in are grouped and passed to the `events` stream as is.\n\n * `vinyl` â€” is [vinyl](https://github.com/wearefractal/vinyl) object that corresponds to the file that caused the event. Additional `event` field is added to determine what caused changes.\n\nPossible events:\n\n * `add` - file was added to watch or created\n * `change` - file was changed\n * `unlink` - file was deleted\n\n#### Options\n\nThis object is passed to the [`chokidar` options](https://github.com/paulmillr/chokidar#api) directly. Options for [`gulp.src`](https://github.com/gulpjs/gulp#gulpsrcglobs-options) are also available. If you do not want content from `watch`, then add `read: false` to the `options` object.\n\n#### options.[ignoreInitial](https://github.com/paulmillr/chokidar#path-filtering)\nType: `Boolean`  \nDefault: `true`\n\n> Indicates whether chokidar should ignore the initial add events or not.\n\n#### options.events\nType: `Array`  \nDefault: `['add', 'change', 'unlink']`\n\nList of events, that should be watched by gulp-watch. Contains [event names from chokidar](https://github.com/paulmillr/chokidar#events).\n\n#### options.base\nType: `String`  \nDefault: `undefined`\n\nUse explicit base path for files from `glob`. Read more about `base` and `cwd` in [gulpjs docs](https://github.com/gulpjs/gulp/blob/master/docs/API.md#options).\n\n#### options.name\nType: `String`  \nDefault: `undefined`\n\nName of the watcher. If it is present in options, you will get more readable output.\n\n#### options.verbose\nType: `Boolean`  \nDefault: `false`\n\nThis option will enable verbose output.\n\n#### options.readDelay\nType: `Number`  \nDefault: `10`\n\nWait for `readDealy` milliseconds before reading the file.\n\n### Methods\n\nReturned `Stream` from constructor has some useful methods:\n\n * `add(path / paths)`\n * `unwatch(path / paths)`\n * `close()`\n\n### Events\n\n * `end`\n * `ready`\n * `error`\n\n### [Changelog](https://github.com/floatdrop/gulp-watch/releases)\n\n## License\n\nMIT (c) 2014 Vsevolod Strukchinsky (floatdrop@gmail.com)\n\n[npm-url]: https://npmjs.org/package/gulp-watch\n[npm-image]: http://img.shields.io/npm/v/gulp-watch.svg?style=flat\n\n[travis-url]: https://travis-ci.org/floatdrop/gulp-watch\n[travis-image]: http://img.shields.io/travis/floatdrop/gulp-watch.svg?style=flat\n\n[coveralls-url]: https://coveralls.io/r/floatdrop/gulp-watch\n[coveralls-image]: http://img.shields.io/coveralls/floatdrop/gulp-watch.svg?style=flat\n\n[depstat-url]: https://david-dm.org/floatdrop/gulp-watch\n[depstat-image]: http://img.shields.io/david/floatdrop/gulp-watch.svg?style=flat\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/floatdrop/gulp-watch",
  "_id": "gulp-watch@4.2.4",
  "_from": "gulp-watch@*"
}
